plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        name = 'lukflug'
        url = 'https://lukflug.github.io/maven'
    }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    compile "com.github.ZeroMemes:Alpine:1.9"
    compile "com.lukflug:panelstudio:${project.panelstudio_version}"
    modCompile "com.lukflug:panelstudio-mc16:0.1.9"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

shadowJar {
    dependencies {
        include(dependency('org.yaml:snakeyaml'))
        include(dependency('net.jodah:typetools'))
        include(dependency('com.github.ZeroMemes:Alpine'))
        include(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        include(dependency('com.lukflug:panelstudio'))
        include(dependency('com.lukflug:panelstudio-mc16'))
    }
    classifier = 'shadow'
}

remapJar {
    dependsOn shadowJar
    mustRunAfter shadowJar
    input = file("build/libs/${archivesBaseName}-${version}-shadow.jar")
}

compileKotlin {
    kotlinOptions {
        languageVersion = "1.4"
    }
}
